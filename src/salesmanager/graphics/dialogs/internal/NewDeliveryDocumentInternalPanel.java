/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesmanager.graphics.dialogs.internal;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import salesmanager.beans.Customer;
import salesmanager.beans.DeliveryDocument;
import salesmanager.beans.Movement;
import salesmanager.beans.Product;
import salesmanager.beans.dao.DBDeliveryManager;
import salesmanager.beans.dao.DBMovementsManager;
import salesmanager.graphics.Main;
import salesmanager.graphics.dialogs.CustomerChooserDialog;
import salesmanager.graphics.dialogs.NewProductDialog;

/**
 *
 * @author Lorenzo
 */
public class NewDeliveryDocumentInternalPanel extends BeanPanel {

    /**
     * Creates new form NewDeliveryDocumentInternalPanel
     */
    private DeliveryDocument document;

    private Customer customer;
    private Date date;
    private ArrayList<Product> products;

    public NewDeliveryDocumentInternalPanel() {
        initComponents();
        this.document = null;
        this.customer = null;
        date = Main.today();
        txtDate.setValue(date);
        products = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        lstProducts = new javax.swing.JList();
        btnAddProduct = new javax.swing.JToggleButton();
        txtDate = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        txtCustomer = new javax.swing.JTextField();
        btnSelectCustomer = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Prodotti"));

        jScrollPane1.setViewportView(lstProducts);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jScrollPane1, gridBagConstraints);

        btnAddProduct.setText("Aggiungi prodotto");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(btnAddProduct, gridBagConstraints);

        txtDate.setColumns(10);
        txtDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtDate, gridBagConstraints);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Data:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel1, gridBagConstraints);

        txtCustomer.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(txtCustomer, gridBagConstraints);

        btnSelectCustomer.setText("Seleziona il cliente");
        btnSelectCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectCustomerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(btnSelectCustomer, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Cliente:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectCustomerActionPerformed
        CustomerChooserDialog ccd = new CustomerChooserDialog();
        ccd.setVisible(true);
        if (ccd.getCustomer() != null) {
            this.customer = ccd.getCustomer();
            txtCustomer.setText(customer.toString());
        }
    }//GEN-LAST:event_btnSelectCustomerActionPerformed

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        NewProductDialog npd = new NewProductDialog(null);
        npd.setVisible(true);
        Product p = npd.getProduct();
        Product[] prods = null;
        if (p != null) {
            if (p.getQta() > 1) {
                int choice = JOptionPane.showConfirmDialog(this, "Vuoi inserire " + p.getQta() + " oggetti separatamente?", "Attenzione", JOptionPane.YES_NO_CANCEL_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    prods = new Product[p.getQta()];
                    p.setQta(1);
                    for (int i = 0; i < prods.length; i++) {
                        prods[i] = new Product(p);
                    }
                } else if (choice == JOptionPane.NO_OPTION) {
                    prods = new Product[]{new Product(p)};
                }
            } else {
                prods = new Product[]{new Product(p)};
            }
        }
        if (prods != null) {
            products.addAll(Arrays.asList(prods));
        }
        DefaultListModel model = new DefaultListModel();
        for (Product product : products) {
            model.addElement(product);
        }
        lstProducts.setModel(model);
    }//GEN-LAST:event_btnAddProductActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAddProduct;
    private javax.swing.JButton btnSelectCustomer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstProducts;
    private javax.swing.JTextField txtCustomer;
    private javax.swing.JFormattedTextField txtDate;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean updateData() {
        if (products.size() > 0 && customer != null && txtDate.getValue() != null) {
            this.date = (Date) txtDate.getValue();
            try {
                Date min = DBMovementsManager.getMinimumDate();
                if (min == null || date.after(min)) {
                    for (Product product : products) {
                        product.clearMovements();
                        product.addMovement(new Movement(-1, Movement.PCV, "Preso in conto vendita", date, product.getPrice(), product.getCommission(), product.getPrice()));
                    }
                    document = new DeliveryDocument(customer, -1, date, products.toArray(new Product[products.size()]));
                    //Assign progressive to the contract: It'll be the last one in specified year
                    document.setProgressive(DBDeliveryManager.getNextDeliveryDocument(Main.year(date)));
                    return true;
                } else {
                    JOptionPane.showMessageDialog(this, "Esistono movimenti con date successive gi√† registrati", "Attenzione", JOptionPane.WARNING_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex, "Errore", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Controllare data, cliente e numero di prodotti", "Attenzione", JOptionPane.WARNING_MESSAGE);
        }
        return false;
    }

    public DeliveryDocument getDocument() {
        return document;
    }

    public void setDocument(DeliveryDocument doc) {
        this.document = doc;
        products = new ArrayList<>(Arrays.asList(doc.getProducts()));
        customer = doc.getCustomer();
        date = doc.getDocumentDate();
        txtCustomer.setText(customer.toString());
        txtDate.setValue(date);
        DefaultListModel model = new DefaultListModel();
        for (Product product : products) {
            model.addElement(product);
        }
        lstProducts.setModel(model);
        
    }
}
