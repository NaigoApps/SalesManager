/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesmanager.graphics.dialogs;

import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import salesmanager.beans.Customer;
import salesmanager.beans.Invoice;
import salesmanager.beans.dao.DBInvoicesManager;

/**
 *
 * @author Lorenzo
 */
public class InvoiceChooserDialog extends javax.swing.JDialog {

    /**
     * Creates new form InvoiceChooserDialog
     */
    private Invoice invoice;
    private Customer customer;

    public InvoiceChooserDialog(java.awt.Frame parent, Customer customer) throws SQLException {
        super(parent, true);
        initComponents();
        this.customer = customer;
        if (customer != null) {
            lstInvoices.setModel(new DefaultComboBoxModel(DBInvoicesManager.getOpenInvoices(customer)));
        } else {
            lstInvoices.setModel(new DefaultComboBoxModel(DBInvoicesManager.getOpenInvoices()));
        }
        pack();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        lstInvoices = new javax.swing.JList();
        btnNew = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setViewportView(lstInvoices);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        btnNew.setText("Nuova");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnNew, gridBagConstraints);

        btnOk.setText("Ok");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnOk, gridBagConstraints);

        btnCancel.setText("Annulla");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnCancel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        invoice = null;
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        if (lstInvoices.getSelectedIndex() != -1) {
            invoice = (Invoice) lstInvoices.getSelectedValue();
            if (customer == null || customer.getCode() == invoice.getCustomer()) {
                dispose();
            } else {
                invoice = null;
                JOptionPane.showMessageDialog(this, "Il cliente dev'essere " + customer.getSurname() + " " + customer.getName(), "Attenzione", JOptionPane.WARNING_MESSAGE);
            }
        } else {
            invoice = null;
            JOptionPane.showMessageDialog(this, "Selezionare una fattura", "Attenzione", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnOkActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        NewInvoiceDialog nid = new NewInvoiceDialog(null);
        nid.setCustomer(customer);
        nid.setVisible(true);
        Invoice i = nid.getInvoice();
        if (i != null) {
            try {
                DBInvoicesManager.addInvoice(i);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex, "Impossibile creare la fattura", JOptionPane.ERROR_MESSAGE);
            }
            try {
                if (customer != null) {
                    lstInvoices.setModel(new DefaultComboBoxModel(DBInvoicesManager.getOpenInvoices(customer)));
                } else {
                    lstInvoices.setModel(new DefaultComboBoxModel(DBInvoicesManager.getOpenInvoices()));
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex, "Impossibile caricare la nuova fattura.", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnNewActionPerformed

    public Invoice getInvoice() {
        return invoice;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnOk;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstInvoices;
    // End of variables declaration//GEN-END:variables
}
