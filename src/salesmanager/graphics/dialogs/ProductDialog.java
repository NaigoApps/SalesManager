/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesmanager.graphics.dialogs;

import java.awt.CardLayout;
import java.awt.Frame;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import salesmanager.beans.Movement;
import salesmanager.beans.Product;
import salesmanager.beans.dao.DBMovementsManager;
import salesmanager.beans.dao.DBProductsManager;
import salesmanager.components.datepicker.DatePickerDialog;

/**
 *
 * @author Lorenzo
 */
public class ProductDialog extends javax.swing.JDialog {

    /**
     * Creates new form ProductDialog
     */
    private Frame parent;

    private Product lastProduct;

    public ProductDialog(java.awt.Frame parent) {
        super(parent, true);
        this.parent = parent;
        initComponents();
        setLocationRelativeTo(null);
    }

    public void setProduct(Product p) throws SQLException {
        p.loadMovements();
        pnProduct.setProduct(p);
        this.lastProduct = p;
        if (p.isSold()) {
            ((CardLayout) pnEast.getLayout()).show(pnEast, "sold");
        } else if (p.isBack()) {
            ((CardLayout) pnEast.getLayout()).show(pnEast, "back");
        } else if (!p.isSold() && !p.isBack()) {
            ((CardLayout) pnEast.getLayout()).show(pnEast, "onSale");
        } else {
            ((CardLayout) pnEast.getLayout()).show(pnEast, "null");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnProduct = new salesmanager.graphics.dialogs.internal.ProductInternalPanel();
        jPanel1 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        pnEast = new javax.swing.JPanel();
        pnOnSaleCommands = new javax.swing.JPanel();
        btnSell = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnSoldCommands = new javax.swing.JPanel();
        pnBackCommands = new javax.swing.JPanel();
        pnNullCommands = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().add(pnProduct, java.awt.BorderLayout.CENTER);

        btnExit.setText("Chiudi");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel1.add(btnExit);

        btnSave.setText("Salva e chiudi");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jPanel1.add(btnSave);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        pnEast.setLayout(new java.awt.CardLayout());

        pnOnSaleCommands.setLayout(new java.awt.GridBagLayout());

        btnSell.setText("Vendi");
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnOnSaleCommands.add(btnSell, gridBagConstraints);

        btnBack.setText("Restituisci");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnOnSaleCommands.add(btnBack, gridBagConstraints);

        btnDelete.setText("Elimina");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnOnSaleCommands.add(btnDelete, new java.awt.GridBagConstraints());

        pnEast.add(pnOnSaleCommands, "onSale");
        pnEast.add(pnSoldCommands, "sold");
        pnEast.add(pnBackCommands, "back");
        pnEast.add(pnNullCommands, "null");

        getContentPane().add(pnEast, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        lastProduct = null;
        dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        if (lastProduct != null) {
            Date d = null;
            try {
                do {
                    DatePickerDialog dpd = new DatePickerDialog(parent);
                    dpd.setTitle("Data movimento");
                    dpd.setVisible(true);
                    d = dpd.getBean();
                } while (d != null && d.before(DBMovementsManager.getMinimumDate(lastProduct)));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex, "Impossibile controllare la data", JOptionPane.ERROR_MESSAGE);
                d = null;
            }
            if (d != null) {
                try {
                    DBMovementsManager.addMovement(new Movement(
                            lastProduct.getCode(),
                            Movement.CPM,
                            "Ceduto per mandato",
                            d,
                            lastProduct.getPrice(),
                            lastProduct.getCommission(),
                            -lastProduct.getPrice()
                    ));
                    setProduct(lastProduct);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Errore durante l'operazione");
                }
            }
        }
    }//GEN-LAST:event_btnSellActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        if (lastProduct != null) {
            Date d = null;
            try {
                do {
                    DatePickerDialog dpd = new DatePickerDialog(parent);
                    dpd.setTitle("Data movimento");
                    dpd.setVisible(true);
                    d = dpd.getBean();
                } while (d != null && d.before(DBMovementsManager.getMinimumDate(lastProduct)));
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex, "Impossibile controllare la data", JOptionPane.ERROR_MESSAGE);
                d = null;
            }
            if (d != null) {
                try {
                    DBMovementsManager.addMovement(new Movement(
                            lastProduct.getCode(),
                            Movement.RES,
                            "Restituito",
                            d,
                            lastProduct.getPrice(),
                            lastProduct.getCommission(),
                            -lastProduct.getPrice()
                    ));
                    setProduct(lastProduct);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Errore durante l'operazione");
                }
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (pnProduct.updateData()) {
            Product product = pnProduct.getProduct();
            Movement movement = null;
            if (product != null) {
                try {
                    product.setCode(lastProduct.getCode());
                    product.setDeliveryDocument(lastProduct.getDeliveryDocument());
                    product.setInvoice(lastProduct.getInvoice());

                    StringBuilder sb = new StringBuilder();
                    if (product.getPrice() != lastProduct.getPrice()) {
                        sb.append("Var. prezzo da ").append(lastProduct.getPrice()).append("€ a ").append(product.getPrice()).append("€");
                    }
                    if (product.getCommission() != lastProduct.getCommission()) {
                        sb.append(", Var. provvigione da ").append(lastProduct.getCommission()).append("% a ").append(product.getCommission()).append("%");
                    }
                    if (sb.length() > 0) {
                        String s = sb.toString();
                        if (s.startsWith(", ")) {
                            s = s.substring(2);
                        }
                        Date d = null;
                        try {
                            do {
                                DatePickerDialog dpd = new DatePickerDialog(parent);
                                dpd.setTitle("Data movimento");
                                dpd.setVisible(true);
                                d = dpd.getBean();
                            } while (d != null && d.before(DBMovementsManager.getMinimumDate(lastProduct)));
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(this, ex, "Impossibile controllare la data", JOptionPane.ERROR_MESSAGE);
                            d = null;
                        }
                        if (d != null) {
                            movement = new Movement(product.getCode(), Movement.VAR, s, d, product.getPrice(), product.getCommission(), product.getPrice() - lastProduct.getPrice());
                            DBMovementsManager.addMovement(movement);
                            DBProductsManager.editProduct(product);
                            dispose();
                        }
                    } else {
                        DBProductsManager.editProduct(product);
                        dispose();
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex, "L'operazione sarà annullata", JOptionPane.WARNING_MESSAGE);
                    try {
                        if (movement != null) {
                            DBMovementsManager.removeMovement(movement);
                            JOptionPane.showMessageDialog(null, "Operazione annullata");
                        }
                    } catch (SQLException ex1) {
                        JOptionPane.showMessageDialog(null, ex1, "Errore durante l'annullamento", JOptionPane.ERROR);
                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Dati non corretti", "Attenzione", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (lastProduct != null) {
            if (lastProduct.getInvoice() == -1) {
                try {
                    lastProduct.loadMovements();
                    boolean registered = false;
                    for (Movement movement : lastProduct.movements()) {
                        if (movement.getProgressive() != -1) {
                            registered = true;
                        }
                    }
                    if (!registered) {
                        int choice = JOptionPane.showConfirmDialog(this, "Sicuro di voler eliminare " + lastProduct + "?", "Attenzione", JOptionPane.YES_NO_OPTION);
                        if (choice == JOptionPane.YES_OPTION) {
                            DBProductsManager.removeProduct(lastProduct);
                            dispose();
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Alcuni movimenti del prodotto sono già registrati", "Impossibile eliminare", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Errore, provare ancora", "Impossibile eliminare", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Il prodotto è presente in una fattura", "Impossibile eliminare", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSell;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel pnBackCommands;
    private javax.swing.JPanel pnEast;
    private javax.swing.JPanel pnNullCommands;
    private javax.swing.JPanel pnOnSaleCommands;
    private salesmanager.graphics.dialogs.internal.ProductInternalPanel pnProduct;
    private javax.swing.JPanel pnSoldCommands;
    // End of variables declaration//GEN-END:variables
}
