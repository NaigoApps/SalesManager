/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package salesmanager.graphics.panels;

import java.awt.print.PageFormat;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.SQLException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import salesmanager.beans.Customer;
import salesmanager.beans.Invoice;
import salesmanager.beans.Movement;
import salesmanager.beans.Product;
import salesmanager.beans.dao.DBDeliveryManager;
import salesmanager.beans.dao.DBInvoicesManager;
import salesmanager.beans.dao.DBMovementsManager;
import salesmanager.beans.dao.DBProductsManager;
import salesmanager.components.datepicker.DatePickerDialog;
import salesmanager.graphics.Main;
import salesmanager.graphics.dialogs.InvoiceChooserDialog;
import salesmanager.graphics.dialogs.ProductDetailsDialog;
import salesmanager.graphics.dialogs.ProductDialog;
import salesmanager.graphics.tables.ProductsModel;
import salesmanager.printable.ProductLabelForm;

/**
 *
 * @author Lorenzo
 */
public class ProductsListPanel extends javax.swing.JPanel implements Loadable, PropertyChangeListener {

    /**
     * Creates new form OnSaleProductsListPanel
     */
    private Main parent;
    private ProductsModel modelOnSale;
    private ProductsModel modelSold;
    private ProductsModel modelBack;

    private Customer customer;

    public ProductsListPanel(Main parent) {
        initComponents();
        try {
            pnNavigation.setPages((DBProductsManager.countOnSaleProducts() + DBProductsManager.MAX_RESULTS - 1) / DBProductsManager.MAX_RESULTS);
        } catch (SQLException ex) {
            pnNavigation.setPages(0);
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Errore di caricamento", JOptionPane.ERROR_MESSAGE);
        }
        pnNavigation.addPropertyChangeListener("page", this);
        this.parent = parent;
        this.customer = null;
        modelOnSale = new ProductsModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (getRowCount() > 0 && columnIndex >= 0 && columnIndex < getColumnCount()) {
                    if (getValueAt(columnIndex, 0) != null) {
                        return getValueAt(columnIndex, 0).getClass();
                    }
                }
                return Object.class;
            }
        };
        tableOnSale.setModel(modelOnSale);
        tableOnSale.setAutoCreateRowSorter(true);
        modelSold = new ProductsModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (getRowCount() > 0 && columnIndex >= 0 && columnIndex < getColumnCount()) {
                    if (getValueAt(columnIndex, 0) != null) {
                        return getValueAt(columnIndex, 0).getClass();
                    }
                }
                return Object.class;
            }
        };
        tableSold.setModel(modelSold);
        tableSold.setAutoCreateRowSorter(true);
        modelBack = new ProductsModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (getRowCount() > 0 && columnIndex >= 0 && columnIndex < getColumnCount()) {
                    if (getValueAt(columnIndex, 0) != null) {
                        return getValueAt(columnIndex, 0).getClass();
                    }
                }
                return Object.class;
            }
        };
        tableBack.setModel(modelBack);
        tableBack.setAutoCreateRowSorter(true);

        txtA.setValue(Main.today());
        txtDa.setValue(Main.lastMonth());
    }

    public void setCustomer(Customer c) {
        this.customer = c;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnOnSale = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOnSale = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnDetails = new javax.swing.JButton();
        btnSell = new javax.swing.JToggleButton();
        btnBack = new javax.swing.JToggleButton();
        btnDelete = new javax.swing.JButton();
        btnMovements = new javax.swing.JButton();
        btnPrintLabel = new javax.swing.JButton();
        pnNavigation = new salesmanager.components.NavigatorPanel();
        pnSold = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableSold = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        btnInvoice = new javax.swing.JButton();
        btnSoldDetails = new javax.swing.JButton();
        pnBack = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableBack = new javax.swing.JTable();
        pnNorth = new javax.swing.JPanel();
        txtDa = new javax.swing.JFormattedTextField();
        txtA = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnDates = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnOnSale.setLayout(new java.awt.BorderLayout());

        tableOnSale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableOnSale);

        pnOnSale.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(7, 1));

        btnDetails.setText("Modifica");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });
        jPanel1.add(btnDetails);

        btnSell.setText("Vendi");
        btnSell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSellActionPerformed(evt);
            }
        });
        jPanel1.add(btnSell);

        btnBack.setText("Restituisci");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack);

        btnDelete.setText("Elimina");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);

        btnMovements.setText("Visualizza movimenti");
        btnMovements.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMovementsActionPerformed(evt);
            }
        });
        jPanel1.add(btnMovements);

        btnPrintLabel.setText("Stampa etichetta");
        btnPrintLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintLabelActionPerformed(evt);
            }
        });
        jPanel1.add(btnPrintLabel);

        pnOnSale.add(jPanel1, java.awt.BorderLayout.EAST);
        pnOnSale.add(pnNavigation, java.awt.BorderLayout.PAGE_END);

        jTabbedPane1.addTab("In vendita", pnOnSale);

        pnSold.setLayout(new java.awt.BorderLayout());

        tableSold.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tableSold);

        pnSold.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridLayout(5, 0));

        btnInvoice.setText("Aggiungi a fattura");
        btnInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvoiceActionPerformed(evt);
            }
        });
        jPanel2.add(btnInvoice);

        btnSoldDetails.setText("Dettagli");
        btnSoldDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSoldDetailsActionPerformed(evt);
            }
        });
        jPanel2.add(btnSoldDetails);

        pnSold.add(jPanel2, java.awt.BorderLayout.LINE_END);

        jTabbedPane1.addTab("Venduti", pnSold);

        pnBack.setLayout(new java.awt.BorderLayout());

        tableBack.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tableBack);

        pnBack.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Restituiti", pnBack);

        add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pnNorth.setLayout(new java.awt.GridBagLayout());

        txtDa.setColumns(8);
        txtDa.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnNorth.add(txtDa, gridBagConstraints);

        txtA.setColumns(8);
        txtA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnNorth.add(txtA, gridBagConstraints);

        jLabel1.setText("Da:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnNorth.add(jLabel1, gridBagConstraints);

        jLabel2.setText("A:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnNorth.add(jLabel2, gridBagConstraints);

        btnDates.setText("Ok");
        btnDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pnNorth.add(btnDates, gridBagConstraints);

        add(pnNorth, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMovementsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMovementsActionPerformed
        int selected = tableOnSale.getSelectedRow();
        if (selected != -1) {
            try {
                selected = tableOnSale.convertRowIndexToModel(selected);
                parent.getMovementsPanel().setProduct(modelOnSale.getProduct(selected));
                parent.showPanel(Main.MOVEMENTS);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex, "Impossibile caricare i movimenti", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnMovementsActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        int selected = tableOnSale.getSelectedRow();
        if (selected != -1) {
            selected = tableOnSale.convertRowIndexToModel(selected);
            ProductDialog dialog;
            try {
                Product toEdit = modelOnSale.getProduct(selected);
                if (toEdit.getInvoice() == -1) {
                    toEdit.loadMovements();
                    boolean registered = false;
                    for (Movement movement : toEdit.movements()) {
                        if (movement.getProgressive() != -1) {
                            registered = true;
                        }
                    }
                    if (!registered) {
                        dialog = new ProductDialog(parent);
                        dialog.setProduct(modelOnSale.getProduct(selected));
                        dialog.setVisible(true);
                        if (customer != null) {
                            modelOnSale.loadCustomersOnSaleProducts(customer.getCode());
                            modelSold.loadCustomersSoldProducts(customer.getCode());
                            modelBack.loadCustomersReturnedProducts(customer.getCode());
                        } else if (txtDa.getValue() != null && txtA.getValue() != null) {
                            modelOnSale.loadOnSaleProducts(pnNavigation.getCurrentPage());
                            modelSold.loadSoldProducts((Date) txtDa.getValue(), (Date) txtA.getValue());
                            modelBack.loadReturnedProducts((Date) txtDa.getValue(), (Date) txtA.getValue());
                        } else {
                            modelOnSale.loadOnSaleProducts(pnNavigation.getCurrentPage());
                            modelSold.loadSoldProducts(Main.lastMonth(), Main.today());
                            modelBack.loadReturnedProducts(Main.lastMonth(), Main.today());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Alcuni movimenti del prodotto sono già registrati", "Impossibile moidficare", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Il prodotto è presente in una fattura", "Impossibile modificare", JOptionPane.WARNING_MESSAGE);
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Impossibile caricare i movimenti");
            }
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int selected = tableOnSale.getSelectedRow();
            if (selected != -1) {
                selected = tableOnSale.convertRowIndexToModel(selected);
                Product toDelete = modelOnSale.getProduct(selected);
                if (toDelete.getInvoice() == -1) {
                    toDelete.loadMovements();
                    boolean registered = false;
                    for (Movement movement : toDelete.movements()) {
                        if (movement.getProgressive() != -1) {
                            registered = true;
                        }
                    }
                    if (!registered) {
                        int choice = JOptionPane.showConfirmDialog(this, "Sicuro di voler eliminare " + modelOnSale.getProduct(selected) + "?", "Attenzione", JOptionPane.YES_NO_OPTION);
                        if (choice == JOptionPane.YES_OPTION) {
                            DBProductsManager.removeProduct(modelOnSale.getProduct(selected));
                            modelOnSale.loadOnSaleProducts(pnNavigation.getCurrentPage());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Alcuni movimenti del prodotto sono già registrati", "Impossibile eliminare", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Il prodotto è presente in una fattura", "Impossibile eliminare", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Errore durante l'eliminazione " + ex.getMessage());
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnPrintLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintLabelActionPerformed
        int[] selected = tableOnSale.getSelectedRows();
        if (selected.length > 0) {
            for (int i = 0; i < selected.length; i++) {
                selected[i] = tableOnSale.convertRowIndexToModel(selected[i]);
            }
            PrinterJob pj = PrinterJob.getPrinterJob();
            if (pj.printDialog()) {
                PageFormat pf = pj.defaultPage();
                pj.setPrintable(new ProductLabelForm(modelOnSale.getProducts(selected)), pf);
                try {
                    pj.print();
                } catch (PrinterException ex) {
                    JOptionPane.showMessageDialog(parent, "Impossibile stampare");
                }
            }
        }

    }//GEN-LAST:event_btnPrintLabelActionPerformed

    private void btnInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvoiceActionPerformed
        try {
            int[] selected = tableSold.getSelectedRows();
            if (selected.length > 0) {
                for (int i = 0; i < selected.length; i++) {
                    selected[i] = tableSold.convertRowIndexToModel(selected[i]);
                }
                Product[] p = modelSold.getProducts(selected);
                boolean ok = true;
                Customer customer = DBDeliveryManager.getProductDeliveryDocument(p[0]).getCustomer();
                for (Product p1 : p) {
                    if (p1.getInvoice() != -1) {
                        ok = false;
                    }
                }
                if (ok) {
                    for (Product p1 : p) {
                        if (DBDeliveryManager.getProductDeliveryDocument(p1).getCustomer().getCode() != customer.getCode()) {
                            ok = false;
                        }
                    }
                    if (ok) {
                        InvoiceChooserDialog icd = new InvoiceChooserDialog(parent, customer);
                        icd.setTitle("Fatture di " + customer.getSurname() + " " + customer.getName());
                        icd.setVisible(true);
                        Invoice inv = icd.getInvoice();
                        if (inv != null) {
                            int n = DBInvoicesManager.getNProducts(inv);
                            if (n + p.length <= Invoice.MAX_PRODUCTS) {
                                for (Product p1 : p) {
                                    DBProductsManager.setInvoice(p1, inv);
                                }
                                modelSold.fireTableDataChanged();
                            } else {
                                JOptionPane.showMessageDialog(null, "Fattura con troppi prodotti, crearne una nuova", "Attenzione", JOptionPane.WARNING_MESSAGE);
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "I prodotti devono essere stati consegnati dallo stesso cliente", "Attenzione", JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Alcuni prodotti sono già presenti in una fattura", "Attenzione", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Errore durante l'assegnamento " + ex.getMessage());
        }
    }//GEN-LAST:event_btnInvoiceActionPerformed

    private void btnSoldDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSoldDetailsActionPerformed
        int selected = tableSold.getSelectedRow();
        if (selected != -1) {
            selected = tableSold.convertRowIndexToModel(selected);
            ProductDetailsDialog dialog;
            try {
                Product toShow = modelSold.getProduct(selected);
                dialog = new ProductDetailsDialog(parent);
                toShow.loadMovements();
                dialog.setProduct(toShow);
                dialog.setVisible(true);

            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Impossibile caricare i movimenti");
            }
        }
    }//GEN-LAST:event_btnSoldDetailsActionPerformed

    private void btnSellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSellActionPerformed
        int selected = tableOnSale.getSelectedRow();
        if (selected != -1) {
            selected = tableOnSale.convertRowIndexToModel(selected);
            Product toSell = modelOnSale.getProduct(selected);
            if (toSell != null) {
                Date d = null;
                try {
                    do {
                        DatePickerDialog dpd = new DatePickerDialog(parent);
                        dpd.setTitle("Data movimento");
                        dpd.setVisible(true);
                        d = dpd.getBean();
                    } while (d != null && d.before(DBMovementsManager.getMinimumDate(toSell)));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex, "Impossibile controllare la data", JOptionPane.ERROR_MESSAGE);
                    d = null;
                }
                if (d != null) {
                    try {
                        DBMovementsManager.addMovement(new Movement(
                                toSell.getCode(),
                                Movement.CPM,
                                "Ceduto per mandato",
                                d,
                                toSell.getPrice(),
                                toSell.getCommission(),
                                -toSell.getPrice()
                        ));
                        modelOnSale.loadOnSaleProducts(pnNavigation.getCurrentPage());
                        modelSold.loadSoldProducts(Main.lastMonth(), Main.today());
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Errore durante l'operazione");
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSellActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        int selected = tableOnSale.getSelectedRow();
        if (selected != -1) {
            selected = tableOnSale.convertRowIndexToModel(selected);
            Product toReturn = modelOnSale.getProduct(selected);
            if (toReturn != null) {
                Date d = null;
                try {
                    do {
                        DatePickerDialog dpd = new DatePickerDialog(parent);
                        dpd.setTitle("Data movimento");
                        dpd.setVisible(true);
                        d = dpd.getBean();
                    } while (d != null && d.before(DBMovementsManager.getMinimumDate(toReturn)));
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex, "Impossibile controllare la data", JOptionPane.ERROR_MESSAGE);
                    d = null;
                }
                if (d != null) {
                    try {
                        DBMovementsManager.addMovement(new Movement(
                                toReturn.getCode(),
                                Movement.RES,
                                "Restituito",
                                d,
                                toReturn.getPrice(),
                                toReturn.getCommission(),
                                -toReturn.getPrice()
                        ));
                        modelOnSale.loadOnSaleProducts(pnNavigation.getCurrentPage());
                        modelBack.loadSoldProducts(Main.lastMonth(), Main.today());
                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Errore durante l'operazione");
                    }
                }
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatesActionPerformed
        try {
            customer = null;
            load();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex, "Impossibile caricare i movimenti", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDatesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnBack;
    private javax.swing.JButton btnDates;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnInvoice;
    private javax.swing.JButton btnMovements;
    private javax.swing.JButton btnPrintLabel;
    private javax.swing.JToggleButton btnSell;
    private javax.swing.JButton btnSoldDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnBack;
    private salesmanager.components.NavigatorPanel pnNavigation;
    private javax.swing.JPanel pnNorth;
    private javax.swing.JPanel pnOnSale;
    private javax.swing.JPanel pnSold;
    private javax.swing.JTable tableBack;
    private javax.swing.JTable tableOnSale;
    private javax.swing.JTable tableSold;
    private javax.swing.JFormattedTextField txtA;
    private javax.swing.JFormattedTextField txtDa;
    // End of variables declaration//GEN-END:variables

    @Override
    public void load() throws SQLException {
        loadOnSale();
        if (customer != null) {
            modelSold.loadCustomersSoldProducts(customer.getCode(), null, null);
            modelBack.loadCustomersReturnedProducts(customer.getCode(), null, null);
        } else {
            modelSold.loadSoldProducts((Date) txtDa.getValue(), (Date) txtA.getValue());
            modelBack.loadReturnedProducts((Date) txtDa.getValue(), (Date) txtA.getValue());
        }
    }

    private void loadOnSale() throws SQLException{
        if (customer != null) {
            modelOnSale.loadCustomersOnSaleProducts(customer.getCode());
        } else {
            modelOnSale.loadOnSaleProducts(pnNavigation.getCurrentPage());
        }
    }
    
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("page".equals(evt.getPropertyName())) {
            try {
                loadOnSale();
                modelOnSale.fireTableDataChanged();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Errore di caricamento", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
